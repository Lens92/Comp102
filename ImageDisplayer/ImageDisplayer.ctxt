#BlueJ class context
comment0.target=ImageDisplayer
comment0.text=\r\n\ Displays\ several\ kinds\ of\ images\ on\ the\ graphics\ panel\:\r\n\ \ -\ colour\ gradients\ (vertical\ gradients\ and\ 2D\ gradients)\r\n\ \ -\ ppm\ images,\ the\ simplest\ possible\ colour\ image\ format.\r\n\ \ -\ any\ pnm\ (ppm,\ pgm,\ pbm)\ images,\ including\ animated\ images.\r\n
comment1.params=
comment1.target=void\ setupGUI()
comment10.params=
comment10.target=void\ doComplGradient()
comment10.text=method\ for\ button,\ calling\ draw2DGradient.
comment11.params=
comment11.target=void\ doComplRender()
comment11.text=method\ for\ button,\ calling\ renderImage.
comment12.params=
comment12.target=void\ doChallRender()
comment12.text=method\ for\ button,\ calling\ renderImage.
comment13.params=prompt
comment13.target=double\ askComponent(java.lang.String)
comment13.text=ask\ for\ a\ colour\ component,\ ensuring\ it\ is\ between\ 0\ and\ 255,\ (inclusive)
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment2.params=red1\ green1\ blue1\ red2\ green2\ blue2
comment2.target=void\ drawVertGradient(double,\ double,\ double,\ double,\ double,\ double)
comment2.text=\r\n\ drawVertGradient\ is\ passed\ the\ component\ values\ (red,\ green,\ blue)\r\n\ for\ two\ colours.\r\n\ It\ then\ draw\ a\ square\ image\ made\ of\ coloured\ pixels\ that\ is\ a\r\n\ smooth\ gradient\ from\ the\ first\ colour\ along\ the\ top\ row\ to\ the\ second\r\n\ colour\ along\ the\ bottom\ row.\r\n\ On\ each\ row\ inbetween,\ the\ colour\ will\ need\ to\ make\ a\ small\ step\r\n\ towards\ the\ target\ colour.\r\n\ Note\:\ The\ steps\ in\ the\ red,\ green,\ and\ blue\ components\ will\ be\ different,\r\n\ \ \ \ \ \ \ and\ depend\ on\ the\ number\ of\ row\ and\ the\ difference\ between\ the\ \r\n\ \ \ \ \ \ \ top\ colour\ and\ the\ botton\ colour.\r\n\ The\ image\ should\ be\ GRAD_ROWS\ x\ GRAD_COLS\ in\ size,\r\n\ \ \ \ \ and\ each\ pixel\ should\ be\ 1x1.\r\n\ Hint\:\ be\ careful\ with\ your\ division\ -\ use\ doubles\!\r\n
comment3.params=fname
comment3.target=void\ render200x200Image(java.lang.String)
comment3.text=\ \r\n\ Renders\ a\ 200x200\ image\ from\ a\ file.\r\n\ The\ file\ must\ contain\ exactly\ 200x200x3\ integers\:\r\n\ three\ numbers\ (red,\ green,\ blue)\ for\ each\ pixel\ of\ the\ image.\r\n\ the\ pixels\ are\ in\ row\ order\ -\ all\ the\ pixels\ for\ the\ first\ row,\r\n\ from\ left\ to\ right,\ followed\ by\ all\ the\ pixels\ for\ the\ second\ row,\r\n\ etc.\r\n\ Each\ pixel\ should\ be\ drawn\ as\ a\ 1x1\ square.\r\n\ Asks\ for\ the\ name\ of\ the\ file\ and\ opens\ a\ Scanner\ on\ the\ file,\r\n\ then\ reads\ three\ numbers\ at\ a\ time\ from\ the\ scanner,\ and\ draws\ the\ pixel.\r\n
comment4.params=red1\ green1\ blue1\ red2\ green2\ blue2
comment4.target=void\ draw2DGradient(double,\ double,\ double,\ double,\ double,\ double)
comment4.text=\r\n\ draw2DGradient\ is\ passed\ the\ component\ values\ (red,\ green,\ blue)\r\n\ for\ two\ colours.\r\n\ It\ then\ draw\ an\ image\ made\ of\ coloured\ squares\ that\ is\ a\r\n\ smooth\ 2D\ gradient\ from\ the\ first\ colour\ at\ the\ top\ left\ corner\r\n\ to\ the\ second\ colour\ at\ the\ bottom\ right.\r\n\ The\ red\ component\ of\ the\ colour\ should\ move\ smoothly\ from\ the\ first\ red\ value\r\n\ \ on\ the\ top\ row\ to\ the\ second\ red\ value\ on\ the\ last\ row(vertical)\r\n\ The\ blue\ component\ of\ the\ colour\ should\ move\ smoothly\ from\ the\ first\ blue\ value\r\n\ \ on\ the\ left\ column\ to\ the\ second\ blue\ value\ on\ the\ rightmost\ column(horizontal)\r\n\ The\ green\ component\ of\ the\ colour\ should\ move\ smoothly\ from\ the\ first\ green\ value\r\n\ \ in\ the\ top-left\ corner\ to\ the\ second\ green\ value\ in\ the\ bottom-right\ corner.(diagonal)\r\n\ The\ image\ should\ be\ GRAD_ROWS\ x\ GRAD_COLS\ in\ size,\ and\ each\ square\ should\ be\ 1x1.\r\n
comment5.params=fname
comment5.target=void\ renderPPMImage(java.lang.String)
comment5.text=\r\n\ Renders\ a\ ppm\ image\ file,\ given\ an\ open\ Scanner\ \r\n\ Renders\ the\ image\ at\ position\ (LEFT,\ TOP).\r\n\ Each\ pixel\ of\ the\ image\ is\ rendered\ by\ a\ square\ of\ size\ PIXEL_SIZE\r\n\ Assumes\ that\r\n\ -\ the\ colour\ depth\ is\ 255,\r\n\ -\ there\ is\ just\ one\ image\ in\ the\ file\ (not\ "animated"),\ and\r\n\ -\ there\ are\ no\ comments\ in\ the\ file.\r\n\ The\ first\ four\ tokens\ are\ "P3",\ number\ of\ columns,\ number\ of\ rows,\ 255\r\n\ The\ remaining\ tokens\ are\ the\ pixel\ values\ (red,\ green,\ blue\ for\ each\ pixel)\r\n\ Hint\:\ to\ draw\ the\ pixels,\ it\ is\ probably\ easiest\ to\ have\ a\ nested\ for\ loop\r\n\ \ that\ will\ repeatedly\r\n\ \ -\ read\ the\ next\ three\ numbers\ from\ the\ scanner\r\n\ \ -\ construct\ the\ Color\ and\ set\ UI's\ color\r\n\ \ -\ draw\ the\ pixel.\r\n\ \ (ie,\ don't\ construct\ an\ ArrayList\ of\ numbers).\r\n
comment6.params=fname
comment6.target=void\ renderPNM(java.lang.String)
comment6.text=\ Challenge\r\n\ Renders\ a\ pnm\ image\ file\ which\r\n\ \ may\ be\ a\ ppm,\ pgm,\ or\ pbm\ file\r\n\ \ may\ have\ comments\ in\ header\ (which\ it\ should\ ignore)\r\n\ \ may\ have\ a\ colour\ depth\ other\ than\ 255,\r\n\ \ \ (in\ which\ case,\ it\ scales\ the\ colour\ values\ appropriately\r\n\ \ may\ be\ animated\ (multiple\ images\ in\ the\ file)\r\n\ \ \ (in\ which\ case,\ it\ renders\ each\ image\ in\ the\ file\ in\ turn\ with\r\n\ \ \ \ 200\ mSec\ delay\ between,\ and\ repeats\ the\ sequence\ 3\ times.\r\n
comment7.params=input
comment7.target=void\ renderOnePNM(java.util.Scanner)
comment8.params=
comment8.target=void\ doCoreGradient()
comment8.text=method\ for\ button,\ calling\ drawVertGradient.
comment9.params=
comment9.target=void\ doCoreRender()
comment9.text=method\ for\ button,\ calling\ renderImage.
numComments=15
